---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app nextcloud
spec:
  interval: 15m
  chart:
    spec:
      chart: nextcloud
      version: 6.6.6
      sourceRef:
        kind: HelmRepository
        name: nextcloud
        namespace: flux-system
      interval: 15m
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    deploymentAnnotations:
      secret.reloader.stakater.com/reload: &secret nextcloud-secret

    fullnameOverride: *app

    ingress:
      enabled: true
      className: external
      annotations:
        gethomepage.dev/enabled: "true"
        gethomepage.dev/group: docs
        gethomepage.dev/name: nextcloud
        gethomepage.dev/icon: sh-nextcloud.svg
        gethomepage.dev/widget.type: nextcloud
        gethomepage.dev/widget.url: https://nextcloud.${SECRET_DOMAIN}
        gethomepage.dev/widget.key: "{{HOMEPAGE_VAR_NEXTCLOUD_TOKEN}}"
        nginx.ingress.kubernetes.io/proxy-body-size: 512M
        nginx.ingress.kubernetes.io/proxy-buffering: "off"
        nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        nginx.ingress.kubernetes.io/cors-allow-headers: "X-Forwarded-For"
        nginx.ingress.kubernetes.io/affinity: cookie
        nginx.ingress.kubernetes.io/server-snippet: |
          server_tokens off;
          proxy_hide_header X-Powered-By;
          rewrite ^/.well-known/webfinger /index.php/.well-known/webfinger last;
          rewrite ^/.well-known/nodeinfo /index.php/.well-known/nodeinfo last;
          rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
          rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;
          location = /.well-known/carddav {
            return 301 $scheme://$host/remote.php/dav;
          }
          location = /.well-known/caldav {
            return 301 $scheme://$host/remote.php/dav;
          }
          location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
          }
          location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
            deny all;
          }
          location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
            deny all;
          }
      path: /
      pathType: Prefix

    nextcloud:
      host: &host nextcloud.${SECRET_DOMAIN}

      # securityContext:
      #   runAsUser: &uid 1003
      #   runAsGroup: &gid 100
      #   runAsNonRoot: true

      existingSecret:
        enabled: true
        secretName: *secret
        usernameKey: ADMIN_USER
        passwordKey: ADMIN_PASS
        tokenKey: METRICS_TOKEN
        smtpUsernameKey: SMTP_USERNAME
        smtpPasswordKey: SMTP_PASSWORD
        smtpHostKey: SMTP_HOST

      datadir: /var/www/data

      extraEnv:
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: *secret
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            secretKeyRef:
              name: *secret
              key: REDIS_PORT
        - name: REDIS_DB
          valueFrom:
            secretKeyRef:
              name: *secret
              key: REDIS_DB
        - name: S3_BUCKET
          valueFrom:
            secretKeyRef:
              name: *secret
              key: S3_BUCKET
        - name: S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: *secret
              key: S3_ACCESS_KEY
        - name: S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: *secret
              key: S3_SECRET_KEY
        - name: OIDC_CLIENT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: *secret
              key: OIDC_CLIENT_PASSWORD
        - name: OIDC_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: *secret
              key: OIDC_CLIENT_ID

      mail:
        enabled: true
        fromAddress: nextcloud
        domain: "${SECRET_PRO_DOMAIN}"
        smtp:
          secure: ssl
          port: 465
          authtype: LOGIN

      extraInitContainers:
        - name: wait-database
          image: alpine:3.21.3
          imagePullPolicy: IfNotPresent
          command:
            - sh
          args:
            - -c
            - >-
              until nc -w 1 -v $POSTGRES_HOST;
              do echo "Waiting for database";
              done
          env:
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: *secret
                  key: POSTGRES_HOST
        - name: wait-redis
          image: alpine:3.21.3
          imagePullPolicy: IfNotPresent
          command:
            - sh
          args:
            - -c
            - >-
              until nc -w 1 -v $REDIS_HOST:$REDIS_PORT;
              do echo "Waiting for Redis";
              done
          env:
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: *secret
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: *secret
                  key: REDIS_PORT

      defaultConfigs:
        redis.config.php: false
        s3.config.php: false

      configs:
        local.config.php: |-
          <?php
          $CONFIG = array (
            'trusted_proxies' =>
            array (
              0 => '127.0.0.1',
              1 => '172.16.0.0/16',
              2 => '10.96.0.0/16',
              3 => '10.69.0.0/16',
            ),
            'trusted_domains' =>
              [
                'nextcloud',
                'nextcloud.selfhosted',
                'nextcloud.${SECRET_DOMAIN}'
              ],
            'forwarded_for_headers' =>
            array (
              0 => 'HTTP_X_FORWARDED_FOR',
              1 => 'X-Forwarded-For',
            ),
            'default_timezone' => '${TIMEZONE}',
            'default_phone_region' => 'US',
            'trashbin_retention_obligation' => 'auto, 30',
            'auth.bruteforce.protection.enabled' => true,
          );

        ingress.config.php: |-
          <?php
          $CONFIG = array (
            'overwrite.cli.url' => 'https://nextcloud.${SECRET_DOMAIN}',
            'overwriteprotocol' => 'https',
            'allow_local_remote_servers' => true
          );

        redis.config.php: |-
          <?php
            $CONFIG = array (
              'memcache.distributed' => '\OC\Memcache\Redis',
              'memcache.locking' => '\OC\Memcache\Redis',
              'redis' => array(
                'host' => getenv('REDIS_HOST'),
                'port' => getenv('REDIS_PORT') ?: 6379,
                'dbindex' => getenv('REDIS_DB'),
              )
            );
        sso.config.php: |-
          <?php
          $CONFIG = array (
            'allow_user_to_change_display_name' => false,
            'lost_password_link' => 'disabled',
            'oidc_login_client_id' => getenv('OIDC_CLIENT_ID'),
            'oidc_login_client_secret' => getenv('OIDC_CLIENT_PASSWORD'),
            'oidc_login_provider_url' => 'https://sso.${SECRET_DOMAIN}/application/o/nextcloud/',
            'oidc_login_end_session_redirect' => true,
            'oidc_login_logout_url' => 'https://sso.${SECRET_DOMAIN}/application/o/nextcloud/end-session/',
            'oidc_login_default_quota' => '1000000000',
            'oidc_login_button_text' => 'Authentik SSO',
            'oidc_login_hide_password_form' => false,
            'oidc_login_attributes' => array (
                     'id' => 'sub',
                     'name' => 'name',
                     'mail' => 'email',
            ),
            'oidc_create_groups' => true,
            'oidc_login_code_challenge_method' => 'S256',
            'oidc_login_auto_redirect' => true,
            'oidc_login_webdav_enabled' => true,
            'oidc_login_disable_registration' => false,
          );
        s3.config.php: |-
          <?php
          $CONFIG = array (
            'objectstore' => array(
              'class' => '\\OC\\Files\\ObjectStore\\S3',
              'arguments' => array(
                'hostname'       => 's3.${SECRET_DOMAIN}',
                'port'           => 443,
                'use_path_style' => true,
                'bucket'         => getenv('S3_BUCKET'),
                'autocreate'     => false,
                'region'     => 'us-east-1',
                'key'            => getenv('S3_ACCESS_KEY'),
                'secret'         => getenv('S3_SECRET_KEY'),
                'use_ssl'        => true,
              ),
            ),
          );

      phpConfigs:
        uploadLimit.ini: |
          upload_max_filesize = 16G
          post_max_size = 16G
          max_input_time = 3600
          max_execution_time = 3600
        # www.conf: |
        #   [www]
        #   user = www-data
        #   group = www-data
        #   listen = 127.0.0.1:9000
        #   pm = dynamic
        #   pm.max_children = 57
        #   pm.start_servers = 14
        #   pm.min_spare_servers = 14
        #   pm.max_spare_servers = 42
        #   pm.max_requests = 500
        #   pm.process_idle_timeout = 10s

      # securityContext:
      #   runAsUser: *uid
      #   runAsGroup: *gid
      #   runAsNonRoot: true

    internalDatabase:
      enabled: false

    externalDatabase:
      enabled: true
      type: postgresql
      existingSecret:
        enabled: true
        secretName: *secret
        usernameKey: POSTGRES_USER
        passwordKey: POSTGRES_PASSWORD
        hostKey: POSTGRES_HOST
        databaseKey: POSTGRES_DB

    persistence:
      enabled: true
      existingClaim: *app

      nextcloudData:
        enabled: true
        existingClaim: nextcloud-data

    cronjob:
      enabled: true

    metrics:
      enabled: false
      https: true
      serviceMonitor:
        enabled: false

    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        memory: 4Gi

    startupProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 360
      successThreshold: 1

    livenessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1

    readinessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
